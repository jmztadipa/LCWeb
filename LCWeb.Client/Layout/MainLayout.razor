@using System.Security.Claims
@using LCWeb.Client.Pages.Auth
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject AuthenticationStateProvider AuthStateProvider
@inject IClientAuthService ClientAuthService

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<style>
    .mud-appbar {
    position: fixed !important;
    top: 0;
    z-index: 1100;
    padding-top: 3px;
    }

    .mud-appbar:nth-of-type(2) {
    top: 66px !important;
    }

    .mud-main-content {
    padding-top: 110px !important; /* Account for both app bars */
    }

    .mud-button {
    text-transform: none !important;
    }

    .mud-button .mud-button-label {
    font-weight: 300;
    letter-spacing: -.1px;
    font-family: 'Poppins';
    }
</style>

<MudLayout>
    <!-- Top Navigation Bar -->
    <MudAppBar Elevation="1" Dense="false" Style="background-color: white; color: #333; height: 70px;">
        <MudContainer MaxWidth="MaxWidth.Large" Class="px-4 py-3">
            <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="w-100">
                <img src="images/sys/logo.png" style="width: 37px;" />
                <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.Center" Spacing="1">
                    <MudMenu StartIcon="@Icons.Material.Outlined.Dashboard"
                    Color="Color.Default"
                    Variant="Variant.Text"
                    Label="Home"
                    Class="text-capitalize"
                    EndIcon="@Icons.Material.Filled.KeyboardArrowDown">
                        <MudMenuItem Href="/">Dashboard</MudMenuItem>
                        <MudMenuItem Href="/permission">Permission</MudMenuItem>
                        <MudMenuItem Href="/role">Role</MudMenuItem>
                        <MudMenuItem Href="/user-permission">User Permission</MudMenuItem>
                        <MudMenuItem Href="/users">Users</MudMenuItem>
                        <MudMenuItem Href="/vendor-maintenance">Vendor Maintenance</MudMenuItem>
                    </MudMenu>

                    <MudMenu StartIcon="@Icons.Material.Outlined.AllInbox"
                    Color="Color.Default"
                    Variant="Variant.Text"
                    Label="Draft Letter of Credit"
                    Class="text-capitalize"
                    EndIcon="@Icons.Material.Filled.KeyboardArrowDown">
                        <MudMenuItem Href="/draft-lc-entry">Draft LC Entry</MudMenuItem>
                        <MudMenuItem Href="/draft-lc-releasing">Draft LC Releasing</MudMenuItem>
                        <MudMenuItem Href="/release-draft-lc">Released Draft LC</MudMenuItem>
                        <MudMenuItem Href="/vendor-maintenance">Vendor Maintenance</MudMenuItem>
                    </MudMenu>

                    <MudMenu StartIcon="@Icons.Material.Outlined.Assignment"
                    Color="Color.Default"
                    Variant="Variant.Text"
                    Label="Letter of Credit"
                    Class="text-capitalize"
                    EndIcon="@Icons.Material.Filled.KeyboardArrowDown">
                        <MudMenuItem Href="/opening-computation">Opening Computation</MudMenuItem>
                        <MudMenuItem Href="/lc-entry">LC Entry</MudMenuItem>
                        <MudMenuItem Href="/lc-issuance">LC Issuance</MudMenuItem>
                        <MudMenuItem Href="/lc-released">Released LC</MudMenuItem>
                        <MudMenuItem Href="/lc-amend">Amend LC</MudMenuItem>
                        <MudMenuItem Href="/check-breakdown">Check Breakdown</MudMenuItem>
                        <MudMenuItem Href="/vendor-maintenance">Vendor Maintenance</MudMenuItem>
                    </MudMenu>

                    <MudMenu StartIcon="@Icons.Material.Outlined.Article"
                    Color="Color.Default"
                    Variant="Variant.Text"
                    Label="Inquiry / Reports"
                    Class="text-capitalize"
                    EndIcon="@Icons.Material.Filled.KeyboardArrowDown">
                        <MudMenuItem Href="/monitoring-report">Monitoring Report</MudMenuItem>
                        <MudMenuItem Href="/amendment-report">Amendment Report</MudMenuItem>
                        <MudMenuItem Href="/vendor-maintenance">Vendor Maintenance</MudMenuItem>
                    </MudMenu>

                </MudStack>
                <MudMenu TransformOrigin="Origin.BottomCenter">
                    <ActivatorContent>
                        <div class="-d-flex align-items-center position-relative">
                            <span class="mr-2" style="font-family: 'Poppins'; color: #FF7A27; font-style: italic; font-weight: 500;">
                                @username
                                <i class="fa-solid fa-chevron-down ml-1" style="font-size: 12px;"></i>
                            </span>
                            <img src="images/sys/user1.png" style="width: 35px;" />
                        </div>
                    </ActivatorContent>
                    <ChildContent>
                        <MudMenuItem OnClick="ChangePass">Change Password</MudMenuItem>
                        <MudMenuItem OnClick="Logout">Logout</MudMenuItem>
                    </ChildContent>
                </MudMenu>
            </MudStack>
        </MudContainer>
    </MudAppBar>

    <!-- Main Content -->
    <MudMainContent Class="pt-16">
        <MudContainer MaxWidth="MaxWidth.Large" Class="h-100 pt-5 pb-10 px-5 px-md-12">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

<GlobalDesign />

@code {
    bool _drawerOpen = true;
    bool _isDarkMode = false;
    private string? username = string.Empty;
    private ChangePassDTO cpassPayload = new ChangePassDTO();

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState token_auth_state = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = token_auth_state.User;
        username = user.Claims.FirstOrDefault(claim => claim.Type == ClaimTypes.UserData)?.Value;
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    void ToggleDarkMode()
    {
        _isDarkMode = !_isDarkMode;
        // You can implement actual theme switching logic here
    }

    private void NavigateToHome()
    {
        NavigationManager.NavigateTo("/");
    }

    private async Task ChangePass()
    {
        var parameters = new DialogParameters();
        parameters.Add("payload", cpassPayload);
        var options = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true, CloseButton = true };
        var dialogResult = await DialogService.Show<ChangePassword>("", parameters, options).Result;

        if (dialogResult.Data != null && dialogResult.Data is ChangePassDTO payload)
        {
            await ClientAuthService.ChangePassword(payload);
            cpassPayload = new ChangePassDTO();
        };
    }

    private async Task Logout()
    {
        string result = await ClientAuthService.Logout();

        if (result == "success")
        {
            NavigationManager.NavigateTo("/login");
        }
    }
}

