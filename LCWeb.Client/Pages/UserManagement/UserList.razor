@page "/users"
@using LCWeb.Client.Components.Dialog
@using LCWeb.Shared.DTOs.MaintenanceDTO
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject IClientUserManagementService ClientUserManagementService
@inject IClientAuthService ClientAuthService

<PageTitle>User Maintenance</PageTitle>

<NavHeader _items="_items" title="Users"/>

<div class="d-flex gap-2 mb-5">
    <button class="header-btn add" @onclick="CreateUser">
        <i class="fa-solid fa-plus"></i>
        ADD NEW
    </button>
    <button class="header-btn" @onclick="UpdateUser" disabled="@(!selectedId.HasValue)">
        <i class="fa-solid fa-pen"></i>
        EDIT
    </button>
</div>

<PaginatedTable 
RowsPerPageChanged="HandleRowsPerPageChangedInRazor"
SearchBar="HandleSearchTextValue"
Paginated="HandlePaginatedBtn"
TotalItems="@TotalItems"
tableLoading="tableLoading"
THCount="8"
Title="USER MANAGEMENT"
Items="ResponseData"
Context="item"
ID="table">

    <TableHeader>
        <th></th>
        <th class="text-center text-nowrap">Id</th>
        <th class="text-center">Username</th>
        <th class="text-center">Last Name</th>
        <th class="text-center">First Name</th>
        <th class="text-center">Status</th>
    </TableHeader>
    <RowTemplate>
        <td class="text-end text-sm-center pt-4 px-7">
            <input type="checkbox" checked="@(selectedId == item.Id)" @onchange="(e) => OnCheckboxChangedHtml(e, item.Id)" style="height: 15px; width: 15px; cursor: pointer;" />
        </td>
        <td data-title="Id" class="py-sm-4 py-3 text-end text-sm-center">@item.Id</td>
        <td data-title="Username" class="py-sm-4 py-3 text-end text-sm-center">@item.Username</td>
        <td data-title="Last Name" class="py-sm-4 py-3 text-end text-sm-center">@item.LastName</td>
        <td data-title="First Name" class="py-sm-4 py-3 text-end text-sm-center">@item.FirstName</td>
        <td data-title="Status" class="py-sm-4 py-3 text-end text-sm-center">
            @if (@item.IsActive)
            {
                @("ACTIVE");
            }
            else
            {
                @("INACTIVE");
            }
        </td>
    </RowTemplate>
</PaginatedTable>

@code {

    private List<BreadcrumbItem> _items =
    [
        new("HOME", href: "/"),
        new("USER MANAGEMENT", href: null, disabled: true)
    ];

    private int RowsPerPage { get; set; } = 10;
    public string TextValue { get; set; } = string.Empty;
    private int TotalItems { get; set; } = 0;
    private GetPaginatedDTO Paginated = new GetPaginatedDTO();
    private List<GetUsersDTO> ResponseData = new List<GetUsersDTO>();
    private RegisterDTO Payload = new RegisterDTO();

    private bool tableLoading = true;

    private int? selectedId = null;

    private void OnCheckboxChangedHtml(ChangeEventArgs e, int id)
    {
        var isChecked = (bool)e.Value;

        if (isChecked)
        {
            selectedId = id;
        }
        else if (selectedId == id)
        {
            selectedId = null;
        }
    }

    private async Task CreateUser()
    {
        var parameters = new DialogParameters();
        parameters.Add("payload", Payload);
        var options = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true, CloseButton = true };
        var dialogResult = await DialogService.Show<CreateUser>("", parameters, options).Result;

        if (dialogResult.Data != null && dialogResult.Data is RegisterDTO payload)
        {
            await ClientAuthService.Register(payload);
            Payload = new RegisterDTO();
            await LoadData();
        };
    }

    private async Task UpdateUser()
    {
       
    }

    protected override async Task OnInitializedAsync()
    {
        tableLoading = true;
        await LoadData();
        tableLoading = false;
    }

    private async void HandleRowsPerPageChangedInRazor(TableStates state)
    {
        tableLoading = true;
        RowsPerPage = state.PageSize;
        Paginated.Skip = state.Page * state.PageSize;
        Paginated.Take = state.PageSize;
        await LoadData();
        tableLoading = false;
        StateHasChanged();
    }

    private async void HandleSearchTextValue(string textValue)
    {
        if (!string.IsNullOrWhiteSpace(textValue))
        {
            tableLoading = true;
            Paginated.SearchValue = textValue;
            await LoadData();
            tableLoading = false;
            StateHasChanged();
        }
        else
        {
            tableLoading = true;
            Paginated.SearchValue = string.Empty;
            await LoadData();
            tableLoading = false;
            StateHasChanged();
        }
    }

    private async void HandlePaginatedBtn(TableStates state)
    {
        tableLoading = true;
        Paginated.Skip = state.Page * state.PageSize;
        Paginated.Take = state.PageSize;
        await LoadData();
        tableLoading = false;
        StateHasChanged();
    }

    private async Task LoadData()
    {
        PaginatedTableResponse<GetUsersDTO> response = await ClientUserManagementService.GetUsers(Paginated);
        TotalItems = response.Count;
        ResponseData = response.ResponseData;
    }

}
